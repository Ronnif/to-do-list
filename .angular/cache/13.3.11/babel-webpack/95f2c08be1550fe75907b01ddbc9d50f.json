{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n}; // ...otros imports...\n\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nlet TaskItemComponent = class TaskItemComponent {\n  constructor() {\n    this.deleted = new EventEmitter();\n    this.toggled = new EventEmitter();\n    this.updated = new EventEmitter();\n    this.showEdit = true;\n    this.showDelete = true;\n    this.showMarkPending = false;\n    this.editing = false;\n    this.editTitle = '';\n    this.editDescription = '';\n  }\n\n  deleteTask() {\n    if (this.task.id !== undefined && this.task.id !== null) {\n      this.deleted.emit(Number(this.task.id)); // <-- Asegura que sea number\n    }\n  }\n\n  toggleComplete() {\n    // Emitimos una copia modificada, no el objeto original\n    this.toggled.emit(Object.assign(Object.assign({}, this.task), {\n      completed: !this.task.completed\n    }));\n  }\n\n  startEdit() {\n    this.editing = true;\n    this.editTitle = this.task.title;\n    this.editDescription = this.task.description;\n  }\n\n  saveEdit() {\n    this.editing = false; // Emitimos una copia modificada, no el objeto original\n\n    this.updated.emit(Object.assign(Object.assign({}, this.task), {\n      title: this.editTitle,\n      description: this.editDescription\n    }));\n  }\n\n  cancelEdit() {\n    this.editing = false;\n  }\n\n  markAsPending() {\n    // Emitimos una copia modificada, no el objeto original\n    this.toggled.emit(Object.assign(Object.assign({}, this.task), {\n      completed: false\n    }));\n  }\n\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], TaskItemComponent.prototype, \"task\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], TaskItemComponent.prototype, \"deleted\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], TaskItemComponent.prototype, \"toggled\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], TaskItemComponent.prototype, \"updated\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], TaskItemComponent.prototype, \"showEdit\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], TaskItemComponent.prototype, \"showDelete\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], TaskItemComponent.prototype, \"showMarkPending\", void 0);\n\nTaskItemComponent = __decorate([Component({\n  selector: 'app-task-item',\n  templateUrl: './task-item.component.html',\n  styleUrls: ['./task-item.component.css']\n})], TaskItemComponent);\nexport { TaskItemComponent };","map":null,"metadata":{},"sourceType":"module"}