{"ast":null,"code":"import { EventEmitter, SimpleChanges } from '@angular/core';\nimport { TaskService } from '../../services/task.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/task.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../task-item/task-item.component\";\n\nfunction TaskListComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_0_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.closeAlert();\n    });\n    i0.ɵɵtext(3, \"\\u00D7\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"show\", ctx_r0.showAlert);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.message, \" \");\n  }\n}\n\nfunction TaskListComponent_app_task_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-task-item\", 5);\n    i0.ɵɵlistener(\"toggled\", function TaskListComponent_app_task_item_2_Template_app_task_item_toggled_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onToggle($event);\n    })(\"deleted\", function TaskListComponent_app_task_item_2_Template_app_task_item_deleted_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onDelete($event);\n    })(\"updated\", function TaskListComponent_app_task_item_2_Template_app_task_item_updated_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onTaskUpdated($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"task\", task_r4)(\"showEdit\", ctx_r1.showEdit)(\"showDelete\", ctx_r1.showDelete)(\"showMarkPending\", ctx_r1.showMarkPending);\n  }\n}\n\nexport let TaskListComponent = /*#__PURE__*/(() => {\n  class TaskListComponent {\n    constructor(taskService) {\n      this.taskService = taskService;\n      this.tasks = [];\n      this.message = '';\n      this.showAlert = false;\n      this.toastMessage = '';\n      this.toast = new EventEmitter();\n      this.filter = 'all';\n      this.showEdit = true;\n      this.showDelete = true;\n      this.showMarkPending = false;\n    }\n\n    ngOnInit() {\n      this.loadTasks();\n    }\n\n    ngOnChanges(changes) {\n      if (changes['filter']) {\n        this.loadTasks();\n      }\n    }\n\n    loadTasks() {\n      this.taskService.getTasks().subscribe(tasks => {\n        // Convierte id a número antes de ordenar\n        let sortedTasks = tasks.map(task => Object.assign(Object.assign({}, task), {\n          id: Number(task.id)\n        })).sort((a, b) => b.id - a.id);\n\n        if (this.filter === 'pending') {\n          sortedTasks = sortedTasks.filter(task => !task.completed);\n        } else if (this.filter === 'completed') {\n          sortedTasks = sortedTasks.filter(task => task.completed);\n        }\n\n        this.tasks = sortedTasks;\n      });\n    }\n\n    showMessage(msg) {\n      this.message = msg;\n      this.showAlert = true;\n      setTimeout(() => this.showAlert = false, 2500);\n    }\n\n    closeAlert() {\n      this.showAlert = false;\n    }\n\n    showToast(msg) {\n      this.toastMessage = msg;\n      setTimeout(() => this.toastMessage = '', 2500);\n    }\n\n    onTaskAdded(data) {\n      const newTask = {\n        title: data.title,\n        description: data.description,\n        completed: false\n      };\n      this.taskService.addTask(newTask).subscribe(() => {\n        this.loadTasks();\n        this.toast.emit('Tarea agregada');\n      });\n    }\n\n    onToggle(task) {\n      this.taskService.updateTask(task).subscribe(() => {\n        this.loadTasks();\n      });\n    }\n\n    onDelete(id) {\n      this.taskService.deleteTask(id).subscribe(() => {\n        this.loadTasks();\n        this.toast.emit('Tarea eliminada');\n      });\n    }\n\n    onUpdate(task) {\n      this.taskService.updateTask(task).subscribe(() => {\n        this.loadTasks();\n      });\n    }\n\n  }\n\n  TaskListComponent.ɵfac = function TaskListComponent_Factory(t) {\n    return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.TaskService));\n  };\n\n  TaskListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskListComponent,\n    selectors: [[\"app-task-list\"]],\n    inputs: {\n      filter: \"filter\",\n      showEdit: \"showEdit\",\n      showDelete: \"showDelete\",\n      showMarkPending: \"showMarkPending\"\n    },\n    outputs: {\n      toast: \"toast\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"alert\", \"role\", \"alert\", 3, \"show\", 4, \"ngIf\"], [1, \"task-list\"], [3, \"task\", \"showEdit\", \"showDelete\", \"showMarkPending\", \"toggled\", \"deleted\", \"updated\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"alert\", 1, \"alert\"], [\"aria-label\", \"Cerrar alerta\", 1, \"close-btn\", 3, \"click\"], [3, \"task\", \"showEdit\", \"showDelete\", \"showMarkPending\", \"toggled\", \"deleted\", \"updated\"]],\n    template: function TaskListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TaskListComponent_div_0_Template, 4, 3, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtemplate(2, TaskListComponent_app_task_item_2_Template, 1, 4, \"app-task-item\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.message);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n      }\n    },\n    directives: [i2.NgIf, i2.NgForOf, i3.TaskItemComponent],\n    styles: [\".alert[_ngcontent-%COMP%]{background:#d1fae5;color:#065f46;border:1px solid #10b981;padding:12px 40px 12px 16px;border-radius:8px;margin-bottom:18px;text-align:center;font-weight:700;position:relative;opacity:0;transform:translateY(-20px);transition:opacity .4s,transform .4s;pointer-events:none}.alert.show[_ngcontent-%COMP%]{opacity:1;transform:translateY(0);pointer-events:auto}.close-btn[_ngcontent-%COMP%]{position:absolute;right:12px;top:8px;background:none;border:none;font-size:1.3em;color:#065f46;cursor:pointer;line-height:1}.close-btn[_ngcontent-%COMP%]:hover{color:#b91c1c}.task-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:18px}\"]\n  });\n  return TaskListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}