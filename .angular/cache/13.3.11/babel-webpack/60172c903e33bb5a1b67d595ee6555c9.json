{"ast":null,"code":"import { EventEmitter, SimpleChanges } from '@angular/core';\nimport { TaskService } from '../../services/task.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/task.service\";\nimport * as i2 from \"../add-task/add-task.component\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../task-item/task-item.component\";\n\nfunction TaskListComponent_app_task_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-task-item\", 3);\n    i0.ɵɵlistener(\"toggled\", function TaskListComponent_app_task_item_1_Template_app_task_item_toggled_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onToggle($event);\n    })(\"deleted\", function TaskListComponent_app_task_item_1_Template_app_task_item_deleted_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onDelete($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"task\", task_r2);\n  }\n}\n\nfunction TaskListComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_2_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.closeAlert();\n    });\n    i0.ɵɵtext(3, \"x\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.message, \" \");\n  }\n}\n\nexport let TaskListComponent = /*#__PURE__*/(() => {\n  class TaskListComponent {\n    constructor(taskService) {\n      this.taskService = taskService;\n      this.tasks = [];\n      this.message = '';\n      this.showAlert = false;\n      this.toastMessage = '';\n      this.toast = new EventEmitter();\n      this.filter = 'all';\n    }\n\n    ngOnInit() {\n      this.loadTasks();\n    }\n\n    ngOnChanges(changes) {\n      if (changes['filter']) {\n        this.loadTasks();\n      }\n    }\n\n    loadTasks() {\n      this.taskService.getTasks().subscribe(tasks => {\n        if (this.filter === 'pending') {\n          this.tasks = tasks.filter(t => !t.completed);\n        } else {\n          this.tasks = tasks;\n        }\n      });\n    }\n\n    showMessage(msg) {\n      this.message = msg;\n      this.showAlert = true;\n      setTimeout(() => this.showAlert = false, 2500); // Oculta después de 2.5s\n    }\n\n    closeAlert() {\n      this.showAlert = false;\n    }\n\n    showToast(msg) {\n      this.toastMessage = msg;\n      setTimeout(() => this.toastMessage = '', 2500);\n    }\n\n    onTaskAdded(data) {\n      const newTask = {\n        title: data.title,\n        description: data.description,\n        completed: false\n      };\n      this.taskService.addTask(newTask).subscribe(() => {\n        this.loadTasks();\n        this.toast.emit('¡Tarea agregada!');\n      });\n    }\n\n    onToggle(task) {\n      this.taskService.updateTask(task).subscribe(() => {\n        this.loadTasks();\n      });\n    }\n\n    onDelete(id) {\n      this.taskService.deleteTask(id).subscribe(() => {\n        this.loadTasks();\n        this.toast.emit('Tarea eliminada');\n      });\n    }\n\n    onUpdate(task) {\n      this.taskService.updateTask(task).subscribe(() => {\n        this.loadTasks();\n      });\n    }\n\n  }\n\n  TaskListComponent.ɵfac = function TaskListComponent_Factory(t) {\n    return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.TaskService));\n  };\n\n  TaskListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskListComponent,\n    selectors: [[\"app-task-list\"]],\n    inputs: {\n      filter: \"filter\"\n    },\n    outputs: {\n      toast: \"toast\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[3, \"taskAdded\"], [3, \"task\", \"toggled\", \"deleted\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"alert alert-info\", 4, \"ngIf\"], [3, \"task\", \"toggled\", \"deleted\"], [1, \"alert\", \"alert-info\"], [1, \"close-btn\", 3, \"click\"]],\n    template: function TaskListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-add-task\", 0);\n        i0.ɵɵlistener(\"taskAdded\", function TaskListComponent_Template_app_add_task_taskAdded_0_listener($event) {\n          return ctx.onTaskAdded($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(1, TaskListComponent_app_task_item_1_Template, 1, 1, \"app-task-item\", 1);\n        i0.ɵɵtemplate(2, TaskListComponent_div_2_Template, 4, 1, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showAlert);\n      }\n    },\n    directives: [i2.AddTaskComponent, i3.NgForOf, i4.TaskItemComponent, i3.NgIf],\n    encapsulation: 2\n  });\n  return TaskListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}